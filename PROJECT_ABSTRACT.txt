================================================================================
                    FOODHUB RESTAURANT MANAGEMENT SYSTEM
                          COMPLETE PROJECT ABSTRACT
================================================================================

PROJECT INFORMATION
===================
Project Name:    FoodHub Restaurant Management System
Author:          Mohammad Adil
Version:         1.1.0
License:         MIT
Repository:      github.com/adil-mohammad-dev/foodhub-restaurant
Deployment:      https://foodhub-restaurant.onrender.com

================================================================================

EXECUTIVE SUMMARY
=================

FoodHub is a compact, production-ready reservation and admin system built
with Node.js and SQLite. It focuses on real-world restaurant needs: overlap-
aware table reservations, OTP verification delivered by email and optional
SMS, payment-aware confirmations, and an attractive animated admin console
for operations (edit, delete, and re-send confirmations). The application
prioritizes easy deployment, extensible delivery channels (SendGrid/Twilio),
and simple admin recovery actions for missed emails.

================================================================================

CORE OBJECTIVES
===============

1. Prevent Overbooking
   - Overlap-aware capacity that treats each reservation as a 2-hour usage of
     a physical table (default 10 tables), preventing double bookings across
     overlapping slots.

2. Enforce Advance Planning
   - Minimum 2-hour lead time (configurable) to ensure kitchen preparedness.

3. Reliable Communications
   - Primary email delivery via SendGrid with nodemailer SMTP fallback; SMS
     via Twilio when configured. Admin can re-send confirmations from UI.

4. Simple Operations UI
   - Modern, animated admin dashboard to manage bookings, re-send emails and
     inspect send results.

================================================================================

FEATURE BREAKDOWN
=================

1. SMART TABLE RESERVATION SYSTEM

   Advance Booking Logic:
   - Minimum Notice: 2 hours (configurable)
   - Maximum Notice: Unlimited
   - IST-aware validation: All checks use Indian Standard Time (UTC+5:30)

   Capacity Management:
   - Default Capacity: 10 tables
   - Dining Duration: 2 hours (overlap detection ±120 minutes)
   - Overlap algorithm prevents capacity exceedance across adjacent slots

2. OTP VERIFICATION & DELIVERY

   - 6-digit OTPs (stored as SHA256 hashes) with 10-minute expiry in the
     `otps` table.
   - Email OTPs: sent by default; status returned in API response.
   - SMS OTPs: sent via Twilio when TWILIO_* environment variables are set.
   - `DEV_SHOW_OTP=1` exposes OTP in API response for secure local testing.

3. PAYMENT-AWARE FLOW

   - Reservations may be created with payment_mode `Cash` or `Online`.
   - POST /payment/confirm: marks a reservation as paid and sends a
     confirmation email. The endpoint is idempotent — if the reservation is
     already paid, it will re-send the confirmation email (useful for
     recovering missed emails).

4. ADMIN DASHBOARD (ENHANCED)

   - `Admin.html` delivers a polished UI (Bootstrap + AOS + canvas particles)
     that shows reservations, allows inline edits, deletion, and re-sending
     confirmation emails. Admin APIs are protected by a static `ADMIN_API_KEY`.

================================================================================

TECHNICAL ARCHITECTURE
======================

Backend Stack:
--------------
Node.js + Express
├── sqlite3 (embedded DB)
├── @sendgrid/mail (optional)
├── nodemailer (SMTP fallback)
├── twilio (optional)
└── dotenv

Frontend Stack:
---------------
HTML/CSS/Vanilla JS
├── Bootstrap (UI)
├── AOS (animations)
└── Bootstrap Icons

Database Schema (high level):
-----------------------------
TABLE: reservations
├── id, name, email, phone, date, time, people, occasion, meal_type
├── payment_mode, payment_status, message, status
├── delivery_option, menu_items (JSON), delivery_address
└── created_at

TABLE: otps
├── id, reservation_data (JSON), email, phone
├── otp (sha256 hash), expires_at
└── created_at

API Highlights:
---------------
POST /reserve/request-otp  — create OTP, send email/SMS, returns otpId
POST /reserve/verify-otp   — verify OTP and create reservation (returns
                             paymentRequired flag when payment is Online)
POST /reserve             — create reservation directly (no OTP)
POST /payment/confirm     — mark paid, set status=confirmed, send email

Admin (x-api-key protected):
- GET /api/reservations
- PUT /api/reservations/:id
- DELETE /api/reservations/:id
- POST /api/reservations/:id/resend-confirmation

================================================================================

DEVELOPER / RUN NOTES
---------------------

1. Install dependencies: `npm install`
2. Create `.env` with the following (examples):
   - ADMIN_API_KEY=admin123
   - EMAIL_USER=you@gmail.com
   - EMAIL_PASS=app-password
   - SENDGRID_API_KEY= (optional)
   - TWILIO_ACCOUNT_SID= (optional)
   - TWILIO_AUTH_TOKEN= (optional)
   - TWILIO_FROM_NUMBER=+1234567890 (optional)
   - DEV_SHOW_OTP=0 (set to 1 for local OTP debugging)
3. Start server: `node server.js` (PORT defaults to 3000)

Useful scripts (in `scripts/`):
- `resend_confirmation.js` — resend confirmation email for a reservation id
- `send_test_email.js` — test SendGrid or SMTP delivery

================================================================================

SECURITY & DELIVERY CONSIDERATIONS
---------------------------------

- Admin API uses a static API key. For production, consider session-based
  authentication or OAuth.
- Keep secrets out of the repo; store in Render/Heroku/Cloud environment
  variables and rotate keys if exposed.
- For reliable email delivery, verify your sending domain and configure
  SPF/DKIM when using SendGrid.

================================================================================

KNOWN LIMITATIONS & NEXT IMPROVEMENTS
===================================

1. Persistent Delivery Logs: Add `email_logs` and `sms_logs` tables to record
   provider responses and retry metadata for audit/retry.
2. Admin Auth Upgrade: Replace `ADMIN_API_KEY` with session-based auth and
   role management for multiple admins.
3. Retry & Queueing: Implement a simple background retry queue for transient
   send failures (e.g., using Bull or a cron-based retry worker).
4. Payment Integration: Integrate a payment gateway (Razorpay/Stripe) for
   seamless online payments and webhook-driven confirmations.
5. Internationalization: Improve phone parsing and add carrier validation for
   robust SMS delivery.

================================================================================

REAL-WORLD USE CASES
====================

Scenario: Family Birthday Dinner
- Book months ahead; confirmation email and admin notice sent; kitchen
  prepared in advance.

Scenario: Friday Night Rush
- Overlap-aware capacity denies overlapping bookings and suggests alternatives.

Scenario: Recovery from Missed Email
- Admin clicks "Resend" in `Admin.html` or calls `/api/reservations/:id/resend-confirmation`.

================================================================================

PROJECT METADATA
================

Lines of Code:        ~3,800+ (including admin UI enhancements)
File Count:           55+ (HTML, CSS, JS, assets)
Database Size:        Starts small, grows with reservations
API Response Time:    < 100ms (local), < 500ms (production)
Email Delivery:       < 5 seconds via SMTP (typical)

Tested On:            Windows 10/11, Chrome/Edge
Node Version:         v16+ - v22

================================================================================

SUCCESS METRICS
===============

✅ Overlap-based capacity prevents double-booking across adjacent slots
✅ Payment-confirm flow with idempotent confirmation and re-send support
✅ OTP delivered via email and (optionally) SMS when Twilio configured
✅ Polished admin UI with actionable controls (Save/Delete/Resend)

================================================================================

CREDITS
=======

Developed By:      Mohammad Adil
Template Base:     Bootstrap (customized)
Inspired By:       Practical restaurant operations and small-business needs

================================================================================

© 2025 Mohammad Adil | FoodHub Restaurant Management System | MIT License

================================================================================
